#########################################################

  - Neste capitulo iremos conhecer um pouco sobre testes
  - Quais tipos de testes e em qual momento utilizar;
  - TDD: Conhecer e como aplicar;
  - Regras de negócio: análise de requisitos

##########################################################

#### TESTES ###

- Vamos iniciar conhecendo um pouco sobre testes, quais os tipos existentes, quais iremos utilizar
  neste e nos próximos módulos e também quais são os beneficios em se utilizar testes;
  - No nosso curso iremos abordar os seguintes escopos de teste:
    - Unitários:
      - São testes responsáveis por testar unidades da nossa aplicação onde há regras
        de negócio, como por exemplo em nossa aplicação as classes de UseCase

    - Integração:
      - São responsáveis por testar toda nossa aplicação, por exemplo em nossa aplicação realizaremos
        o teste desde a requisição pela rota, controllers, UseCases e repositries. Ou seja testamos
        o fluxo completo da aplicação desde a conexão do banco (no ambiente de testes), serviços,
        serviços externos (como por exemplo envio de e-mail);
  
  - Também iremos abordar a utilização da métodologia TDD (Test Driven Development), ou seja, essa
    métodologia guia nosso desnevolvimento a partir de testes, isto é, começamos o desenvolvimento abordar
    partir da criação de testes para depois partirmos para o desenvolvimento da aplicação 
    próprimanete dito;

  - Vantagens e desvantagens na utilização de testes em uma aplicação:
    - Vantagens:
      - Em caso de mudança de uma regra de negócio o teste irá falhar caso esteja bem escrito, desta
        forma temos um aliado enquanto a detecção de bugs em nossa aplicação, já que o cenário de teste
        não foi alterado com as mudanças da regra de negócio;

    - Desvantagem:
      - Barreira/custo inicial, já que é preciso adptação e aprendizado sobre a ferramenta de testes;

  - Nesta aula vamos então começar a pratica de nossos testes;
    - Iniciamos fazendo a instalação do "Jest" que é a biblioteca que iremos utilizar, bem como as
      suas tipagens. Iremos instalar como dependência de deselvolvimento com o comando:
        - "npm install --save-dev jest @types/jest"; 
    - Em seguida rodamos o comando "npx jest --init", e vamos responder as perguntas como a seguir:
        - Would you like to use Jest when running "test" script in "package.json"? ... yes
        - Would you like to use Typescript for the configuration file? ... yes
        - Choose the test environment that will be used for testing » node
        - Automatically clear mock calls, instances and results before every test? ... yes
    - Feito isso a lib disponibiliza na raiz do nosso projeto o arquivo "jest.config.ts" que é
      o responsavel por armazenar as configurações de nosso ambiente;
    - Vamos tambem instalar a biblioteca ts-jest como dependência de desenvolvimento com o comando:
      - "npm install --save-dev ts-jest";
    - E dentro do arquivo "jest.config.ts" vamos até a propriedade "preset" e descomenta-la. Em seguida
      alteramos seu valor para "ts-jest"
    - Também precisamos passar o mapeamento das classes que iremos realizar a cobertura. Procuramos
      então pela propriedade "testMatch" e fazemos da seguinte forma:
        - "testMatch: ["**/*.spec.ts"],"
    - Vamos alterar o valor da propriedade "bail" para "true". Essa propriedade verifica a existencia
      de erros, por padrão essa propriedade vem como "false" e executa todos os testes apresentando
      os erros ao fim do ciclo. Com essa nova atribuição assim que existe uma primeira falha todo o
      ciclo é interrompido mostrando onde foi ocasionado o erro;
    - Vamos então criar nosso primeiro teste em:
      - "src/modules/cars/useCases/createCategory/createCategoryUseCase.spec.ts"
    - Basicamente um teste precisa que informemos o resultado esperado para que haja a comparação
      entre o esperado e o recebido.
    - Começamos então definindo o primeiro caso sendo o "Criar Categoria" usando o método "describe".
      Com o método "it" passamos o titulo do teste e a lógica e em seguida com o método "expect" verificamos
      o resultado;
    - Também poderiamos verificar o caso contrario onde o método expect utiliza o método not para
      esperar um resultado diferente do que é recebido;

  - Nessa aula vamos de fato criar nosso teste de createCategory;
    - É muito importante deixar o teste o mais declartivo possível;
    - Esbarramos na primeira barreira do nosso teste, já que nosso UseCase depende do repository e 
      nos testes unitários não iremos testar o acesso ao banco de dados já que não é sua responsabilidade;
    - Entretanto como utilizamos interfaces não precisamos depender do repository ja existente, poderiamos
      criar um novo repository que não faz o acesso ao banco. Dito isto, criaremos para nossos testes
      repositories "in-memory", então criamos o diretório com mesmo ome dentro do diretorio "repositories";
    - Criamos a classe implementando a interface "CategoriesRepositoryInterface", definimos os métodos
      como fizemos no inicio de nossos estudos;
    - Fora do método de "describe" vamos definir 2 varaiveis que serão do tipo do nosso UseCase e do
      tipo do In-Memory Repository que acabamos de criar e dentro da suite de teste no método "describe"
      vamos fazer a chamada do método "beforeEach()" que executará sempre antes de cada teste. E assim
      instanciamos as interfaces iremos utilizar;
    - Então desenvolvemos as lógicas de criação e validação da criação de categoria com mesmo nome;
