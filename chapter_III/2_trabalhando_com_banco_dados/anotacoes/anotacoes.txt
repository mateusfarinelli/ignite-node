### Trabalhando com Banco de Dados ###

- Quando trabalhamos com banco de dados em uma aplicação, temos 3 possibilidades:
  - Utilização do drive nativo do banco/linguagem;
  - Utilização de um query builder (exemplo o knex.js);
  - Utilização de um ORM (Sequelize e TypeORM por exemplo);
  - Nesse projeto iremos utilizar o TypeORM;
    - Link oficial do TypeORM: https://typeorm.io/#/

- Vamos então iniciar a instalação e configuração do TypeORM em nosso projeto;
  - Inicialmente instalamos as depêndencias do typeorm e do reflect-metadata;
    - "npm install typeorm reflect-metadata";
  - Segundo a instrutora não precisamos instalar os tipos "@types" (entretanto resalvo que
    a instalação dos tipos está descrita na documentação da biblioteca);
  - Passamos então a instalação do driver do banco que iremos utilizar:
      - "npm install pg";
  - Posteiromente no arquivo "tsconfig.json" precisamos habilitar (como true), as
    propriedades:
      - experimentalDecorators;
      - emitDecoratorMetadata;
  - Então criamos o diretório "database/" em "src/" e dentro dele criamos o "index.ts",
    dessa forma iremos iniciar nossa conexão da maneira mais simples que é utilizando
    o método createConnection do TypeORM;
  - Dentro do "server.ts" apenas importamos o database/index.ts;
  - Na raiz do projeto criamos o arquivo "ormconfig.json" passando algumas propriedades,
    conforme instrução da documentação para o tipo de extensão selecionada;
  - Agora como precisamos criar o banco, bem como usuario e senha, iremos prosseguir para
    a próxima aula e verificar como criar um container para o banco;

  - Agora veremos como criar um container para o banco de dados;
  - No nosso arquivo docker-compose.yml vamos adicionar o nosso banco de dados
    - Para isso logo acima do app (já que o app depende do banco) adicionamos o serviço
      database_ignite, recebendo como parametro para a propriedade "image" o nome da imagem e
      demais configurações;
    - Essa parte foi um pouco trabalhosa por conta de alguns erros, ou comportamentos inesperados
      por isso é muito importante também seguir esse documento:
        - https://www.notion.so/Refatora-o-Docker-com-TypeORM-4500fc0d075349ac9b97d670e734d41b;
  
  - Nessa aula vamos ver como fazer o gerenciamento do nosso banco de dados através do ORM, ou seja,
    como criar, editar e remover tabelas e etc;
    - Com isso vamos estudar um pouco o conceito de "migrations". Migrations são como uma forma de
      versionamento do nosso banco de dados, ou seja, criamos as tabelas dentro da propria aplicação;
    - Deixando as informações das tabelas mais clara e disponivel para todos os contribuintes do
      projeto;
  
  - Visto a introdução as migrations na aula passada, vamos dar inicio ao estudo pratico dessa
    ferramenta.
    - Iniciamos criando o script "typeorm" no nosso package.json, de modo a deixar o typeorm-cli
      disponivel para nossa aplicação com o comando:
        - "ts-node-dev ./node_modules/typeorm/cli";
    - Para utilizar o script precisamos utilizar o "npx" logo o comando para utilizar a cli ficará:
      - "npm run typeorm -- -[parâmetro]";
    - Agora criamos o diretorio "migrations" dentro da pasta "database" que é onde ficarão os
      arquivos de migrations gerados pelo cli;
    - Precisamos ainda adicionar o objeto "cli" com a propriedade "migrationsDir" no arquivo
      ormconfig.json, passando como valor o caminho relativo do diretório de migrations;
    - Agora para criar a nossa migration de categorias vamos usar o comando:
      -"npm typeorm migration:create -- -n CreateCategories";
    - Com o arquivo gerado passamos as configurações necessárias de acordo com a documentação;
    - Para que a tabela seja criada no banco, antes de rodar o devido comando, vamos passar
      a propriedade "migrations" para o arquivo ormconfig.json com o caminho relativo do
      nosso diretorio de migrations e finalizar chamando qualquer arquivo terminado em "*.ts"
      nesse diretório (qualquer = *);
    - E agora em nosso terminal romados o comando responsavel por criar nossa tabela no banco:
      -"npm typeorm migration:run"
    - Para verificar basta entrar na interface de gerenciamento do banco de dados e verificar
      se a tabela "categories" foi criada, bem como a tabela "migrations" e ainda verificar
      se dentro da tabela migrations existe um registro contendo os campos "timestamps" e "name"
      referentes a tabela criada.
    - Caso seja necessário executar o método "down" da migration basta executar no terminal
      o comando:
        - "npm run typeorm migration:revert"

  - Nessa aula vamos fazer o mapeamento da nossa tabela para nosso código, ou seja, vamos criar um
    modelo da tabela em forma de classe para que o typeorm possa trabalhar com essas tabelas;
    - Inicialmente iremos renomear a pasta "model" dentro de "modules" para "entities" 
    - Então vamos importar o objeto Entity do typeorm em nosso antigo model (que agora são entities)
      de "Category". Para isso "decoramos" a classe com o "decorator" "@Entity("categories")"
    - Vamos também passar os decorators para cada uma das colunas por exemplo:
      - Para primary key: "@PrimaryColumn()"
      - Para colunas "simples": "@Column()"
      - Para colunas created_at ou update_at: existem decorators proprios como "@CreateDateColumn()"
      e "@UpdateDateColumn()"

  - Vamos começar a refatoração de nossos repository para que de fato consigamos manipular nosso
    banco de dados;
      - Iniciando pelo "CategoriesRepository", na documentação vemos que existem varias maneiras
        de trabalhar com o repository com o TypeORM, uma delas é anotar nossa classe com o 
        decorator "@EntityRepository("entitie")" e extender a classe "Repository<Entitie>",
        entretanto fazendo dessa forma permite que a inteface do repository acesse todos os
        métodos disponiveis na classe Repository do TypeORM e isso não é o que queremos;
      - Dessa forma criamos uma variavel de escopo privado do tipo "Reposity<Category>",
        e em nosso construtor inicializamos essa variavel com o metodo getRepository passando
        a entidade Category como argumento (valor passado ao parametro);
      - Agora podemos fazer os ajustes necessários utilizando os métodos do TypeORM conforme
        documentação;
      - Na próxima aula iremos ajustar o código para resolver erros por conta das alteraçoes
        realizadas nessa aula;
  
  - Inicialmente vamos remover o atributo private do nosso construtor para que método seja
    acessado publicamente, uma vez que tambem iremos remover a verificação da instanciação
    passando agora a não termos mais um singleton pattern para o repositorio;
    - Em seguida vamos transformar o index do createCategory (e demais useCase) em uma função;
    - E ajustar o import, bem como a chamada do controller no arquivo de rotas;
    - Além disso é preciso passar os métodos execute e handle dos arquivos UseCase e Controller
      respecitvamente para métodos assincronos e ajustar o retorno para uma promise;
    - Feito isso, já conseguimos criar uma nova categoria diretamente no banco, isso é verificavel
      utilizando o BeeKeeper Studio;