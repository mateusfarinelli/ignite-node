#### INICIANDO COM DOCKER ####

- Guia de instalação: 
  - https://www.notion.so/Docker-e-Docker-Compose-16771f2ceefe4a05a8c29df4ca49e97a;

- Nessa aula veremos uma breve introdução ao Docker, "o que é", e 
  "qual problema ele busca resolver" e "como podemos utilziar ele na nossa aplicação";

  - O que é?
    - Ferramenta que auxiliar na criação de container;
    - Container: podemos entender como um ambiente isolado na nossa máquina/servidor;
    - Imagens: instruções para criação de containers;
    - O que "roda" localmente "roda" em produção: conseguimos "emular" um ambiente de pro-
      dução no nosso ambiente local;

  - Uma rápida comparação entre uma infra sem e com docker;
    - SEM DOCKER:
      - A infra proriamente dita que é a camada mais baixa da nossa comparação
      - Um sistema de VM (Hypervisor, VMWare, entre outros) que é a interface entre a infra
        e nossas máquinas virtuais;
      - E por fim as máquinas virutais de cada serviço, contendo OS, configurações e os
        serviços especificos de cada VM;

    - COM DOCKER:
      - A infra semelhante ao ambiente sem docker;
      - O OS do host (no meu caso Windows por ser local);
      - O Docker
      - Os containers criados com o docker, onde cada container representaria um serviço,
        ou, se compararmos com o ambiente sem docker, as VMs. Entretanto é precisso ressaltar
        que quando utilizamos docker temos o OS compartilhado, bem como suas configurações
        sem que precisemos configurar e instalar OS e serviços, apenas aplicando a imagem docker
        respectiva;

- Vamos agora iniciar então a criação do nosso primeiro container e conhecer um pouco sobre 
  Dockerfile:
  - Então como ja visto, o Docker veio para que pudessemos ter um padrão entre o ambiente de 
    desenvolvimento e o ambiente de produção, dessa forma muitas instalações e configurações
    podem ser "passadas" para o Docker;
  - Vamos então iniciar nossa prática criando o arquivo "Dockerfile" na raiz do projeto que
    iremos usar para estudo (neste caso usaremos o rentalx criado na aula passada);
  - Também instalamos a extenção "Docker" da MS para nos ajudar com snipets;
  - Para saber quais imagens disponiveis o docker possui, podemos utilizar o link:
      - https://hub.docker.com/search;
  - Agora que ja sabemos todos esses atalhos, vamos para a Dockerfile criada e vamos inserir
    a imagem do "node" para o container;
  - Passamos também o nosso "WORKDIR" (onde ficaram as informações necessárias)
  - E também copiar o arquivo "package.json para" dentro desse WORKDIR
  - Criamos também um arquivo ".dockerignore" para que arquivos desnecessários não sejam
    inseridos em nosso container já que queremos que o container seja responsavel por baixar
    as dependências e instala-las;
  - Posteriormente fazemos a copia de todos os arquivos para o container;
  - Liberamos a porta que iremos utilizar;
  - E por fim, permitimos o uso do comando "npm run dev";
  - Com o Dockerfile criado, dentro da raiz do projeto onde o Dockerfile se encontra, vamos rodar
    o comando "docker build -t <nome_da_imagem> <diretorio_do_dockerfile>", ficando:
      -  "docker build -t rentalx ."
  - Executando o comando "docker ps" que lista as imagens que estão rodando, veremos um retorno vazio
    pois nossa imagem apenas foi criada e não inicializada;
  - Para rodar nossa imagem iremos executar o comando "docker run -p <porta_local>:<porta_container> <nome_imagem>"
    ficando para nosso exemplo:
      - "docker run -p 3333:3333 rentalx";
    - Lembrando que a opção "-p" realiza um mapeamento das portas por se tratar de uma especie de "VM";
  - Podemos acessar nosso container via terminal, utilizando o comando:
      - "docker exec -it <nome_container> /bin/bash";
    - Dessa forma iremos acessar o container;

- Vamos ver agora um pouco sobre o docker-compose;
  - Docker Compose é (uma ferramenta) basicamente um orquestrador de containers, ou seja, 
    um tipo de gerenciador, que permite que façamos algumas configurações como definir serviços
    que iremos rodar, dependências de serviços, varaiveis de ambiente e outras;
  
  - Vamos iniciar nossa pratica criando na raiz de nosso projeto, ou seja, mesmo nivel que Criamos
    o Dockerfile o arquivo "docker-compose.yml"
  - Aqui iremos fazer algumas configurações dentre elas a versão do docker-compose que estamos usando
    para isso é importante acessar o link https://docs.docker.com/compose/compose-file/ e verificar
    qual a versão mais recente conforme sua versão do docker (usar o comando docker --version para 
    saber);
  - Então fazemos as configurações passando as propriedades:
    - app: que recebe as informações sobre a aplicação;
    - container_name: que recebe o nome que utilziara para criar e gerenciar o container;
    - ports: que recebe o mapeamento das portas, entre o local e o container;
    - volumes: que é o mapeamento entre dos diretorios onde o projeto se encontra em relação
      ao caminho relativo ao arquivo e o diretorio onde será hospedado no container;
  - Dessa forma teremos então o container rodando e também fazendo o hot reload;
  - No windows é preciso adicionar a flag "--pol" no script "dev" no "package.json" para que
    o hot reload funcione;
  - Para que não fique logando todos os eventos podemos iniciar nosso servidor atráves do comando:
      - "docker-compose up -d"
    Assim container segue sendo executado mas sem printar no console o log;
    Para poder ver os logs integrais em tempo real podemos usar o comando:
      - "docker-compose logs <container_name> -f"
  
  - Vamos conhecer agora alguns comandos para o docker/docker-compose, bem como alguns cuidados
    que devemos ter com esses comandos;
    # DOCKER: 
      - "docker ps": listagem dos container online;
        - "docker ps -a": lista todos os containers (online e offline);
      - "docker rm <container_id> ou <container_name>": remove um container, para executar esse 
        comando é preciso que o container esteja pausado, ou seja, não esteja online;
      - "docker start <container_id> ou <container_name>";
      - "docker stop <container_id> ou <container_name>";
      - "docker exec -it <container_id> ou <container_name> /bin/bash": acessa o container,
        como se fosse um ssh de uma VM;
      - "docker logs <container_id> ou <container_name>": mostra os ultimos logs gerados;
        - passando a flag "-f" é possível acompanhar os logs em tempo real;
        
    # DOCKER-COMPOSE:
      - "docker-compose up": cria e sobe o container com log parcial;
        - podemos ainda passar a flag "-d" para subir o container em background sem apresentação
          de nenhum log no nosso console;
      - "docker-compose start": iniciar o container já criado;
      - "docker-compose stop <container_id> ou <container_name>": para o container;
      - "docker-compose down <container_id> ou <container_name>": é analago ao "docker rm";