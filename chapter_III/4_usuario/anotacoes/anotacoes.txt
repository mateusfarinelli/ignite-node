### Usuário ###

  - Nesta seção iremos criar o migration, repositorio e controller para a entidade Usuário;
  - Também veremos criptografia de senha, JWT, autenticação nas rotas e Tratamento de execeções;

  - Na primeira aura iremos criar então a migration de usuário;
  - Começando pela execução do comando:
    - "npx typeorm migration:create -n CreateUsers"
    E em seguida iremos codificar a migration conforme escopo da tabela passada no grupo;
  - Agora executa-se o comando:
    - "npm run typeorm migration:run"
    Para que a tabela seja gerada no banco de dados;
  - Cria-se etão o módulo "accounts" para armazenar a entidade "user" e as classes responsaveis
    por gerir essa entidade (useCase, controller e etc). E em seguida cria-se entidade nomeando o
    arquivo como "User.ts";

  - Nessa aula iremos criar o repositório de usuário;
  - Começamos então criando o diretorio "accounts/repositories". Logo em seguida criamos o arquivo
    de interface do repositório "UserRepositoryInterface.ts";
  - Inicialmente o unico método que teremos é o create. Para esse método precisamos receber as
    informações referentes ao nosso "User";
    - Dessa forma criamos a DTO Interface para o "User" afim de tipar e dar inteligebilidade para
      nosso código, passando então as propriedades necessarias;
  - Assim criamos então o método recebendo uma argumento "data" do tipo "CreateUserInterfaceDTO"
    e esperamos que esse método retorne uma "Promise<void>";
  - Na sequencia vamos criar a "implementation" onde será guardado o código responsavel por fazer
    a comunicação com o banco de dados como já vimos anteriormente.
    - Neste ponto vamos fazer uma leve refatoração colando o DTO "CreateUserInterfaceDTO" em um arquivo
      separado, para que possamos utiliza-lo em outras classes caso seja necessário, para isso criamos
      o diretorio "modules/accounts/dtos" e copiamos o código da DTO fazendo o export;
    - Por enquanto iremos fazer de uma forma mais basica sem pensar em validators ou regras de negocio.
      - Sendo assim, iniciamos fazendo a desestruturação do "data" que estava sendo passado como parametro
        do método e criamos a instancia do "getRepository(User)". Por fim criamos e salvamos o usuário
        com os dados recebidos;
    - Agora podemos dar inicio ao desenvolvimento do UseCase;
      - Craimos então o diretorio "modules/accounts/useCases" e em seguida criamos o diretorio 
        "modules/accounts/useCases/createUser";
      - Sem seguida criamos os arquivos "CreateUserUseCase.ts" e "CreateController.ts", suas 
        respectivas classes e exprts;
      - No arquivo "CreateUserUseCase.ts" iremos declarar o método "execute" e já fazer o necessário
        para que essa classe possa ser injetada com o TSyringe;
      - Posteriormente vamos no nosso "shared/container" onde estão guardados o registros de nossas dependencias
        para criar um novo container para o "UserRepositoryInterface"

  - Nesta aula vamos dar sequencia na aula anterior, criando o nosso controller;
    - Como já havia criado o arquivo e a classe na aula anteiror, partimos para implementação
      do método handle que agora receberá como parametro o "Request" e o "Response" do express,
      e retornará uma "Promise<Response>";
    - A implementação do método se resume em receber as informações necessárias pelo body da
      requisição (fazendo a desestruturação para facilitar) e em seguida executar a chamada
      do "CreateUserUseCase" chamando o método "execute()" e passando os dados recebidos na
      requisição conforme outros métodos semelhantes ja implementados;
  - Seguimos então para codificção de nossas rotas, criando o arquivo "routes/users.routes.ts";
    - Aqui criamos a rota igual fizemos para os demais casos semelhantes;
  
  - Nesta aula iremos fazer uma rápida alteração na tabela de usuários que consiste basicamente
    remover a coluna "username", utilizando a criação de uma migration que será a responsavel
    por realizar o "dropColumn" no método "up" da migration e em caso "down" realizar a adição
    do campo na tabela;
    - Para isso iniciamos criando a migration "AlterUserDeleteUsername" com o comando:
      - "npx typeorm migration:create -n AlterUserDeleteUsername";
    - Fazemos o desenvolvimento do método e então executamos o comando para executar a migration:
      - "npm run typeorm migration:run";
    - Por fim vamos remover todo código que envolve username;
  
  - Nesta aula vamos fazer a criptografia da senha, já que até o presente momento ela aparece
    totalmente exposta no nosso banco de dados;
    - Para isso vamos utilizar a biblioteca Bcrypt que será a responsavel por gerar o hash
      que será utilizado como senha, para isso executamos os comandos:
      - "npm install bcrypt" e "npm install --save-dev @types/bcrypt";
      - "npm install bcryptjs" e "npm install --save-dev @types/bcryptjs"; // Docker com problemas com o bycript
    - Agora no nosso UseCase antes de enviar a senha, iremos criptografar a senha e
      posteriormente passar o hash gerado pelo bcrypt como valor deste campo;
    - No "CreateUserUseCase" fazemos a verificação de e-mail já existente, para isso fazemos a declaração
      da função no "UserRepositoryInterface" recebendo "email" como argumento e no "UserRepository",
      fazemos a implementação da funçãp que busca o usuário no banco dados através do e-mail
      utilizando o método "findOne" do "typeorm";

  - Agora vamos dar inicio a parte de autenticação de nossa aplicação, pra isso iremos utilizar
    o JWT (JSON Web Token);
    - A estratégia de Tokens é largamente utilziada no desenvolvimento WEB/Mobile moderno, por isso
      escolhemos utilizar essa abordagem aqui também. Além disso o JWT em especial é uma das formas
      mais encontradas nesse universo e ele possui a seguinte estrutura:
      - "HeaderHash.PayloadHash.AssinaturaHash" conforme encotrado em jwt.io;
    - Assim como qualquer sistema de hash e criptografia o JWT criptografa esses campos de um JSON
      nesses hashs e utilizando uma hash privada conhecida apenas pelas aplicações essas trocas de 
      informações são feitas de modo seguro;
    - É importante ressaltar que as informações sobre um usuário por exemplo, ficam contidos na
      PayloadHash e não devemos passar dados sensiveis nessas informações, como por exemplo senhas,
      numeros de documentos pessoais e etc;

    - Iniciamos então a aula da sequencia adicionando a lib "jsonwebtoken" com os comandos:
      - "npm install jsonwebtoken" e "npm install --save-dev @types/jsonwebtoken";
      - E seguimos criando o diretório "/modules/accounts/authenticateUser" onde ficaram os códigos
        responsaveis por fazer a autenticação dos usuários, ou seja, gerênciar os tokens validos
        de nossa aplicação;
      - Em seguida fazemos a criação do "authenticateUserUseCase.ts" onde iremos criar uma interface
        para receber os dados da requisição (email e senha) e também fazer as verificações de 
        email e senha para então gerar o token no método "execute"
      - Posteriormente vamos criar o controller das requisições de autenticação 
        "authenticateController".ts. Definindo o método assincrono "handle" que recebe o email e
        password pelo body da requisição fazendo a chamada ao "authenticateUserUseCase" e passando
        as informações recebidas para o método retornando as informações recebidas e formato JSON;
      - E por fim vamos criar o arquivo "authenticate.routes.ts" no nosso diretório "routes" e
        fazendo sua chamada no "routes/index.ts", passando ele diretamente já que não haverá nenhum
        recurso na url, apenas aquele informado no arquivo "authenticate.routes.ts"

      
